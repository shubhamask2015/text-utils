{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextArea.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","prop","word","alert","react_default","a","createElement","className","concat","type","role","toLowerCase","charAt","toUpperCase","slice","message","Navbar","props","mode","href","titles","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextArea","_useState","useState","_useState2","Object","slicedToArray","text","setText","previewStyle","color","_useState3","_useState4","textStyle","setTextStyle","Fragment","style","lable","onChange","event","target","value","backgroundColor","fontWeight","rows","newtext","showAlert","newText","length","split","defaultProps","App","setMode","setAlert","typ","msg","setTimeout","document","body","title","setInterval","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.3c5d568d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(prop) {\r\n\r\n    const capitalise = (word)=>{\r\n        word = word.toLowerCase();\r\n        return word.charAt(0).toUpperCase()+word.slice(1);\r\n    }\r\n\r\n    return (\r\n        \r\n        prop.alert && <div> \r\n            <div className={`alert alert-${prop.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalise(prop.alert.type)}: </strong>{prop.alert.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.titles}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"#\">About Us</a>\r\n                            </li>\r\n                        </ul>\r\n                        <form className=\"d-flex\">\r\n                            <div className={`form-check form-switch text-${props.mode === 'dark'? 'light':'dark'}`}>\r\n                                <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'dark'?\"Enable Lightmode\":\"Enable Darkmode\"}</label>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    titles: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    titles: 'Shubham'\r\n}\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nexport default function TextArea(props) {\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handelUpClick = () => {\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert('success', 'Convert to upper case !!!');\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('success', 'Converted to lower case !!!');\r\n    }\r\n\r\n    let previewStyle = {\r\n        color: props.mode === 'light'? 'black':'white'\r\n    }\r\n\r\n    const [textStyle, setTextStyle] = useState('normal');\r\n    const handleBoldClick = () => {\r\n        if (textStyle === 'normal') {\r\n            setTextStyle('bold');\r\n            props.showAlert('success', 'Converted to bold text !!!');\r\n        }\r\n        else{\r\n            setTextStyle('normal');\r\n\r\n           props.showAlert('success', 'Converted to normal text !!!');\r\n        }\r\n    }\r\n\r\n    const clearText = ()=>{\r\n        setText(\"\");\r\n        props.showAlert('success', 'Text Box Cleared !!!');\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"mb-3, container\">\r\n                <label style={{color: props.mode === 'light'? 'black':'white'}} htmlFor=\"exampleFormControlTextarea1\" className=\"my-3 form-label\">{props.lable}</label>\r\n                <textarea className=\"form-control\" onChange={handleOnChange} style={{color: props.mode === 'light'? 'black':'white',backgroundColor: props.mode === 'dark'? 'grey':'white', fontWeight:textStyle}} value={text} rows=\"9\"></textarea>\r\n                <button type=\"button\" onClick={handelUpClick} className=\"btn btn-primary my-3\">Upper Case</button>\r\n                <button type='button' onClick={handleLowClick} className=\"btn btn-primary my-3 mx-2\">Lower Case</button>\r\n                <button className=\"btn btn-primary my-3 mx-2\" onClick={handleBoldClick}>Bold</button>\r\n                <button className='btn btn-primary my' onClick={clearText}>Clear</button>\r\n            </div>\r\n\r\n            <div className=\"container\" style={{color: props.mode === 'light'? 'black':'white'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>No of character = {text.length}, No of words = {text.split(\" \").length}</p>\r\n\r\n                <h3>Preview</h3>\r\n                <p style={previewStyle}>{text.length>0?text:\"Write something in the box to preview it here.\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from 'react';\nimport React from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextArea from './components/TextArea';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (typ, msg) => {\n    setAlert({\n      type: typ,\n      message: msg\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"success\", \"Darkmode enabled !!!\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.title = 'Text-Util Light';\n      showAlert(\"success\", \"Lightmode Enabled !!!\");\n    }\n\n    setInterval(() => {\n      document.title = 'Text-Util DArk';\n    }, 3000);\n\n    setInterval(() => {\n      document.title = 'Text-Util Light';\n    }, 3300);\n  }\n\n  return (\n      <>\n        <Navbar titles=\"TExtUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <TextArea showAlert={showAlert} mode={mode}/>\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}